{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/**\n * @fileoverview Custom React hooks for managing animations in the EventPal application\n * \n * This module provides reusable React hooks that integrate with GSAP animations from\n * the AnimationUtils module. These hooks handle the lifecycle of animations, cleanup,\n * and provide ref objects that can be attached to React components for automatic animation.\n * \n * Features:\n * - Button animations with different types (default, primary, tab)\n * - Card hover animations with entrance effects\n * - Entrance animations (fade, slide, bounce) with customizable delays\n * - Automatic cleanup to prevent memory leaks\n * - Type-based animation selection\n * \n * @author EventPal Team\n * @version 1.0.0\n */\n\nimport { useEffect, useRef } from 'react';\nimport { AnimationUtils } from '../utils/animations';\n\n/**\n * Custom hook for button animations with different interaction types\n * \n * @param {string} type - Animation type: 'default', 'primary', or 'tab'\n * @returns {React.RefObject} Ref object to attach to button elements\n * \n * Animation Types:\n * - 'default': Standard hover/click animations\n * - 'primary': Enhanced animations with pulse effect and ripple\n * - 'tab': Tab-specific animations with active state handling\n * \n * Usage:\n * const buttonRef = useButtonAnimation('primary');\n * <button ref={buttonRef}>Click me</button>\n */\nexport const useButtonAnimation = (type = 'default') => {\n  _s();\n  const ref = useRef(null);\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n    let cleanup;\n\n    // Apply different animation types based on button purpose\n    switch (type) {\n      case 'primary':\n        // Primary buttons get enhanced animations with continuous pulse\n        cleanup = AnimationUtils.initPrimaryButton(element);\n        // Add tactile ripple effect for better user feedback\n        AnimationUtils.addRippleEffect(element);\n        break;\n      case 'tab':\n        // Tab buttons need special handling for active states\n        cleanup = AnimationUtils.initTab(element);\n        break;\n      default:\n        // Standard button animations for most use cases\n        cleanup = AnimationUtils.initButton(element);\n        break;\n    }\n\n    // Return cleanup function to prevent memory leaks\n    return cleanup;\n  }, [type]); // Re-run effect when animation type changes\n\n  return ref;\n};\n\n/**\n * Custom hook for card animations with hover effects and entrance\n * \n * @returns {React.RefObject} Ref object to attach to card elements\n * \n * Features:\n * - Hover animations: lift effect with enhanced shadows\n * - Entrance animation: fade up with slight delay for smooth loading\n * - Automatic cleanup on component unmount\n * \n * Usage:\n * const cardRef = useCardAnimation();\n * <div ref={cardRef} className=\"card\">Card content</div>\n */\n_s(useButtonAnimation, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nexport const useCardAnimation = () => {\n  _s2();\n  const ref = useRef(null);\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Initialize hover animations for card\n    const cleanup = AnimationUtils.initCard(element);\n\n    // Add entrance animation with small delay for staggered loading effect\n    AnimationUtils.fadeInUp(element, 0.1);\n    return cleanup;\n  }, []); // Empty dependency array - only run once on mount\n\n  return ref;\n};\n\n/**\n * Custom hook for entrance animations with multiple animation types\n * \n * @param {string} type - Animation type: 'fadeInUp', 'slideInLeft', 'bounceIn'\n * @param {number} delay - Animation delay in seconds (default: 0)\n * @returns {React.RefObject} Ref object to attach to elements\n * \n * Animation Types:\n * - 'fadeInUp': Fade in from bottom with scale effect\n * - 'slideInLeft': Slide in from left with elastic bounce\n * - 'bounceIn': Scale from zero with elastic bounce\n * \n * Usage:\n * const titleRef = useEntranceAnimation('bounceIn', 0.5);\n * <h1 ref={titleRef}>Welcome!</h1>\n */\n_s2(useCardAnimation, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nexport const useEntranceAnimation = (type = 'fadeInUp', delay = 0) => {\n  _s3();\n  const ref = useRef(null);\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Apply entrance animation based on specified type\n    switch (type) {\n      case 'fadeInUp':\n        // Smooth fade from bottom - good for content sections\n        AnimationUtils.fadeInUp(element, delay);\n        break;\n      case 'slideInLeft':\n        // Dynamic slide from left - good for navigation items\n        AnimationUtils.slideInLeft(element, delay);\n        break;\n      case 'bounceIn':\n        // Playful bounce effect - good for logos and highlights\n        AnimationUtils.bounceIn(element, delay);\n        break;\n      default:\n        // Default to fadeInUp for consistency\n        AnimationUtils.fadeInUp(element, delay);\n    }\n  }, [type, delay]); // Re-run when type or delay changes\n\n  return ref;\n};\n\n// Export hooks as default object for convenient importing\n_s3(useEntranceAnimation, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nconst animationHooks = {\n  useButtonAnimation,\n  useCardAnimation,\n  useEntranceAnimation\n};\nexport default animationHooks;","map":{"version":3,"names":["useEffect","useRef","AnimationUtils","useButtonAnimation","type","_s","ref","element","current","cleanup","initPrimaryButton","addRippleEffect","initTab","initButton","useCardAnimation","_s2","initCard","fadeInUp","useEntranceAnimation","delay","_s3","slideInLeft","bounceIn","animationHooks"],"sources":["E:/WEB DEV/REACT/EventPal/src/hooks/useAnimations.js"],"sourcesContent":["/**\n * @fileoverview Custom React hooks for managing animations in the EventPal application\n * \n * This module provides reusable React hooks that integrate with GSAP animations from\n * the AnimationUtils module. These hooks handle the lifecycle of animations, cleanup,\n * and provide ref objects that can be attached to React components for automatic animation.\n * \n * Features:\n * - Button animations with different types (default, primary, tab)\n * - Card hover animations with entrance effects\n * - Entrance animations (fade, slide, bounce) with customizable delays\n * - Automatic cleanup to prevent memory leaks\n * - Type-based animation selection\n * \n * @author EventPal Team\n * @version 1.0.0\n */\n\nimport { useEffect, useRef } from 'react';\nimport { AnimationUtils } from '../utils/animations';\n\n/**\n * Custom hook for button animations with different interaction types\n * \n * @param {string} type - Animation type: 'default', 'primary', or 'tab'\n * @returns {React.RefObject} Ref object to attach to button elements\n * \n * Animation Types:\n * - 'default': Standard hover/click animations\n * - 'primary': Enhanced animations with pulse effect and ripple\n * - 'tab': Tab-specific animations with active state handling\n * \n * Usage:\n * const buttonRef = useButtonAnimation('primary');\n * <button ref={buttonRef}>Click me</button>\n */\nexport const useButtonAnimation = (type = 'default') => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    let cleanup;\n    \n    // Apply different animation types based on button purpose\n    switch (type) {\n      case 'primary':\n        // Primary buttons get enhanced animations with continuous pulse\n        cleanup = AnimationUtils.initPrimaryButton(element);\n        // Add tactile ripple effect for better user feedback\n        AnimationUtils.addRippleEffect(element);\n        break;\n      case 'tab':\n        // Tab buttons need special handling for active states\n        cleanup = AnimationUtils.initTab(element);\n        break;\n      default:\n        // Standard button animations for most use cases\n        cleanup = AnimationUtils.initButton(element);\n        break;\n    }\n\n    // Return cleanup function to prevent memory leaks\n    return cleanup;\n  }, [type]); // Re-run effect when animation type changes\n\n  return ref;\n};\n\n/**\n * Custom hook for card animations with hover effects and entrance\n * \n * @returns {React.RefObject} Ref object to attach to card elements\n * \n * Features:\n * - Hover animations: lift effect with enhanced shadows\n * - Entrance animation: fade up with slight delay for smooth loading\n * - Automatic cleanup on component unmount\n * \n * Usage:\n * const cardRef = useCardAnimation();\n * <div ref={cardRef} className=\"card\">Card content</div>\n */\nexport const useCardAnimation = () => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Initialize hover animations for card\n    const cleanup = AnimationUtils.initCard(element);\n    \n    // Add entrance animation with small delay for staggered loading effect\n    AnimationUtils.fadeInUp(element, 0.1);\n\n    return cleanup;\n  }, []); // Empty dependency array - only run once on mount\n\n  return ref;\n};\n\n/**\n * Custom hook for entrance animations with multiple animation types\n * \n * @param {string} type - Animation type: 'fadeInUp', 'slideInLeft', 'bounceIn'\n * @param {number} delay - Animation delay in seconds (default: 0)\n * @returns {React.RefObject} Ref object to attach to elements\n * \n * Animation Types:\n * - 'fadeInUp': Fade in from bottom with scale effect\n * - 'slideInLeft': Slide in from left with elastic bounce\n * - 'bounceIn': Scale from zero with elastic bounce\n * \n * Usage:\n * const titleRef = useEntranceAnimation('bounceIn', 0.5);\n * <h1 ref={titleRef}>Welcome!</h1>\n */\nexport const useEntranceAnimation = (type = 'fadeInUp', delay = 0) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Apply entrance animation based on specified type\n    switch (type) {\n      case 'fadeInUp':\n        // Smooth fade from bottom - good for content sections\n        AnimationUtils.fadeInUp(element, delay);\n        break;\n      case 'slideInLeft':\n        // Dynamic slide from left - good for navigation items\n        AnimationUtils.slideInLeft(element, delay);\n        break;\n      case 'bounceIn':\n        // Playful bounce effect - good for logos and highlights\n        AnimationUtils.bounceIn(element, delay);\n        break;\n      default:\n        // Default to fadeInUp for consistency\n        AnimationUtils.fadeInUp(element, delay);\n    }\n  }, [type, delay]); // Re-run when type or delay changes\n\n  return ref;\n};\n\n// Export hooks as default object for convenient importing\nconst animationHooks = {\n  useButtonAnimation,\n  useCardAnimation,\n  useEntranceAnimation\n};\n\nexport default animationHooks;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}