{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEB DEV\\\\REACT\\\\EventPal\\\\src\\\\components\\\\ThemeSwitcher.js\",\n  _s = $RefreshSig$();\n/**\n * @fileoverview Theme switcher component for light/dark mode toggle\n * \n * The ThemeSwitcher provides a visual toggle button that allows users to switch\n * between light and dark themes. It features a sliding track design with animated\n * icons that change based on the current theme state.\n * \n * Features:\n * - Toggle button with track and thumb design\n * - Dynamic icons (sun for light, moon for dark)\n * - Accessibility support with descriptive title\n * - Integrates with AppContext theme management\n * - CSS transitions for smooth visual feedback\n * \n * @author EventPal Team\n * @version 1.0.0\n */\n\nimport React from 'react';\nimport { useApp } from '../context/AppContext';\nimport './ThemeSwitcher.css';\n\n/**\n * ThemeSwitcher component that renders a toggle button for theme switching\n * Uses a track and thumb design similar to iOS switches\n * \n * @returns {JSX.Element} The theme switcher button\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeSwitcher = () => {\n  _s();\n  // Get current theme and toggle function from app context\n  const {\n    theme,\n    toggleTheme\n  } = useApp();\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"theme-switcher\",\n    onClick: toggleTheme,\n    title: `Switch to ${theme === 'light' ? 'dark' : 'light'} mode`,\n    \"aria-label\": `Switch to ${theme === 'light' ? 'dark' : 'light'} mode`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-switcher-track\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"theme-switcher-thumb\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fas ${theme === 'light' ? 'fa-sun' : 'fa-moon'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeSwitcher, \"+Ay3wg1Q2qbCKP28dDOLgtVupV8=\", false, function () {\n  return [useApp];\n});\n_c = ThemeSwitcher;\nexport default ThemeSwitcher;\nvar _c;\n$RefreshReg$(_c, \"ThemeSwitcher\");","map":{"version":3,"names":["React","useApp","jsxDEV","_jsxDEV","ThemeSwitcher","_s","theme","toggleTheme","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/WEB DEV/REACT/EventPal/src/components/ThemeSwitcher.js"],"sourcesContent":["/**\n * @fileoverview Theme switcher component for light/dark mode toggle\n * \n * The ThemeSwitcher provides a visual toggle button that allows users to switch\n * between light and dark themes. It features a sliding track design with animated\n * icons that change based on the current theme state.\n * \n * Features:\n * - Toggle button with track and thumb design\n * - Dynamic icons (sun for light, moon for dark)\n * - Accessibility support with descriptive title\n * - Integrates with AppContext theme management\n * - CSS transitions for smooth visual feedback\n * \n * @author EventPal Team\n * @version 1.0.0\n */\n\nimport React from 'react';\nimport { useApp } from '../context/AppContext';\nimport './ThemeSwitcher.css';\n\n/**\n * ThemeSwitcher component that renders a toggle button for theme switching\n * Uses a track and thumb design similar to iOS switches\n * \n * @returns {JSX.Element} The theme switcher button\n */\nconst ThemeSwitcher = () => {\n  // Get current theme and toggle function from app context\n  const { theme, toggleTheme } = useApp();\n\n  return (\n    <button \n      className=\"theme-switcher\"\n      onClick={toggleTheme}\n      title={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\n      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\n    >\n      {/* Track container - provides the sliding background */}\n      <div className=\"theme-switcher-track\">\n        {/* Thumb - the sliding indicator with icon */}\n        <div className=\"theme-switcher-thumb\">\n          {/* Dynamic icon based on current theme */}\n          <i className={`fas ${theme === 'light' ? 'fa-sun' : 'fa-moon'}`}></i>\n        </div>\n      </div>\n    </button>\n  );\n};\n\nexport default ThemeSwitcher;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,OAAO,qBAAqB;;AAE5B;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGN,MAAM,CAAC,CAAC;EAEvC,oBACEE,OAAA;IACEK,SAAS,EAAC,gBAAgB;IAC1BC,OAAO,EAAEF,WAAY;IACrBG,KAAK,EAAE,aAAaJ,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,OAAQ;IAChE,cAAY,aAAaA,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,OAAQ;IAAAK,QAAA,eAGrER,OAAA;MAAKK,SAAS,EAAC,sBAAsB;MAAAG,QAAA,eAEnCR,OAAA;QAAKK,SAAS,EAAC,sBAAsB;QAAAG,QAAA,eAEnCR,OAAA;UAAGK,SAAS,EAAE,OAAOF,KAAK,KAAK,OAAO,GAAG,QAAQ,GAAG,SAAS;QAAG;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb,CAAC;AAACV,EAAA,CArBID,aAAa;EAAA,QAEcH,MAAM;AAAA;AAAAe,EAAA,GAFjCZ,aAAa;AAuBnB,eAAeA,aAAa;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}