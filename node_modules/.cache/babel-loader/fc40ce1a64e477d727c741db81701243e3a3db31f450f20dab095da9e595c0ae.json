{"ast":null,"code":"/**\n * @fileoverview Custom React hooks for managing animations in the EventPal application\n * \n * This module provides reusable React hooks that integrate with GSAP animations from\n * the AnimationUtils module. These hooks handle the lifecycle of animations, cleanup,\n * and provide ref objects that can be attached to React components for automatic animation.\n * \n * Features:\n * - Button animations with different types (default, primary, tab)\n * - Card hover animations with entrance effects\n * - Entrance animations (fade, slide, bounce) with customizable delays\n * - Automatic cleanup to prevent memory leaks\n * - Type-based animation selection\n * \n * @author EventPal Team\n * @version 1.0.0\n */import{useEffect,useRef}from'react';import{AnimationUtils}from'../utils/animations';/**\n * Custom hook for button animations with different interaction types\n * \n * @param {string} type - Animation type: 'default', 'primary', or 'tab'\n * @returns {React.RefObject} Ref object to attach to button elements\n * \n * Animation Types:\n * - 'default': Standard hover/click animations\n * - 'primary': Enhanced animations with pulse effect and ripple\n * - 'tab': Tab-specific animations with active state handling\n * \n * Usage:\n * const buttonRef = useButtonAnimation('primary');\n * <button ref={buttonRef}>Click me</button>\n */export const useButtonAnimation=function(){let type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'default';const ref=useRef(null);useEffect(()=>{const element=ref.current;if(!element)return;let cleanup;// Apply different animation types based on button purpose\nswitch(type){case'primary':// Primary buttons get enhanced animations with continuous pulse\ncleanup=AnimationUtils.initPrimaryButton(element);// Add tactile ripple effect for better user feedback\nAnimationUtils.addRippleEffect(element);break;case'tab':// Tab buttons need special handling for active states\ncleanup=AnimationUtils.initTab(element);break;default:// Standard button animations for most use cases\ncleanup=AnimationUtils.initButton(element);break;}// Return cleanup function to prevent memory leaks\nreturn cleanup;},[type]);// Re-run effect when animation type changes\nreturn ref;};/**\n * Custom hook for card animations with hover effects and entrance\n * \n * @returns {React.RefObject} Ref object to attach to card elements\n * \n * Features:\n * - Hover animations: lift effect with enhanced shadows\n * - Entrance animation: fade up with slight delay for smooth loading\n * - Automatic cleanup on component unmount\n * \n * Usage:\n * const cardRef = useCardAnimation();\n * <div ref={cardRef} className=\"card\">Card content</div>\n */export const useCardAnimation=()=>{const ref=useRef(null);useEffect(()=>{const element=ref.current;if(!element)return;// Initialize hover animations for card\nconst cleanup=AnimationUtils.initCard(element);// Add entrance animation with small delay for staggered loading effect\nAnimationUtils.fadeInUp(element,0.1);return cleanup;},[]);// Empty dependency array - only run once on mount\nreturn ref;};/**\n * Custom hook for entrance animations with multiple animation types\n * \n * @param {string} type - Animation type: 'fadeInUp', 'slideInLeft', 'bounceIn'\n * @param {number} delay - Animation delay in seconds (default: 0)\n * @returns {React.RefObject} Ref object to attach to elements\n * \n * Animation Types:\n * - 'fadeInUp': Fade in from bottom with scale effect\n * - 'slideInLeft': Slide in from left with elastic bounce\n * - 'bounceIn': Scale from zero with elastic bounce\n * \n * Usage:\n * const titleRef = useEntranceAnimation('bounceIn', 0.5);\n * <h1 ref={titleRef}>Welcome!</h1>\n */export const useEntranceAnimation=function(){let type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'fadeInUp';let delay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;const ref=useRef(null);useEffect(()=>{const element=ref.current;if(!element)return;// Apply entrance animation based on specified type\nswitch(type){case'fadeInUp':// Smooth fade from bottom - good for content sections\nAnimationUtils.fadeInUp(element,delay);break;case'slideInLeft':// Dynamic slide from left - good for navigation items\nAnimationUtils.slideInLeft(element,delay);break;case'bounceIn':// Playful bounce effect - good for logos and highlights\nAnimationUtils.bounceIn(element,delay);break;default:// Default to fadeInUp for consistency\nAnimationUtils.fadeInUp(element,delay);}},[type,delay]);// Re-run when type or delay changes\nreturn ref;};// Export hooks as default object for convenient importing\nconst animationHooks={useButtonAnimation,useCardAnimation,useEntranceAnimation};export default animationHooks;","map":{"version":3,"names":["useEffect","useRef","AnimationUtils","useButtonAnimation","type","arguments","length","undefined","ref","element","current","cleanup","initPrimaryButton","addRippleEffect","initTab","initButton","useCardAnimation","initCard","fadeInUp","useEntranceAnimation","delay","slideInLeft","bounceIn","animationHooks"],"sources":["E:/WEB DEV/REACT/EventPal/src/hooks/useAnimations.js"],"sourcesContent":["/**\n * @fileoverview Custom React hooks for managing animations in the EventPal application\n * \n * This module provides reusable React hooks that integrate with GSAP animations from\n * the AnimationUtils module. These hooks handle the lifecycle of animations, cleanup,\n * and provide ref objects that can be attached to React components for automatic animation.\n * \n * Features:\n * - Button animations with different types (default, primary, tab)\n * - Card hover animations with entrance effects\n * - Entrance animations (fade, slide, bounce) with customizable delays\n * - Automatic cleanup to prevent memory leaks\n * - Type-based animation selection\n * \n * @author EventPal Team\n * @version 1.0.0\n */\n\nimport { useEffect, useRef } from 'react';\nimport { AnimationUtils } from '../utils/animations';\n\n/**\n * Custom hook for button animations with different interaction types\n * \n * @param {string} type - Animation type: 'default', 'primary', or 'tab'\n * @returns {React.RefObject} Ref object to attach to button elements\n * \n * Animation Types:\n * - 'default': Standard hover/click animations\n * - 'primary': Enhanced animations with pulse effect and ripple\n * - 'tab': Tab-specific animations with active state handling\n * \n * Usage:\n * const buttonRef = useButtonAnimation('primary');\n * <button ref={buttonRef}>Click me</button>\n */\nexport const useButtonAnimation = (type = 'default') => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    let cleanup;\n    \n    // Apply different animation types based on button purpose\n    switch (type) {\n      case 'primary':\n        // Primary buttons get enhanced animations with continuous pulse\n        cleanup = AnimationUtils.initPrimaryButton(element);\n        // Add tactile ripple effect for better user feedback\n        AnimationUtils.addRippleEffect(element);\n        break;\n      case 'tab':\n        // Tab buttons need special handling for active states\n        cleanup = AnimationUtils.initTab(element);\n        break;\n      default:\n        // Standard button animations for most use cases\n        cleanup = AnimationUtils.initButton(element);\n        break;\n    }\n\n    // Return cleanup function to prevent memory leaks\n    return cleanup;\n  }, [type]); // Re-run effect when animation type changes\n\n  return ref;\n};\n\n/**\n * Custom hook for card animations with hover effects and entrance\n * \n * @returns {React.RefObject} Ref object to attach to card elements\n * \n * Features:\n * - Hover animations: lift effect with enhanced shadows\n * - Entrance animation: fade up with slight delay for smooth loading\n * - Automatic cleanup on component unmount\n * \n * Usage:\n * const cardRef = useCardAnimation();\n * <div ref={cardRef} className=\"card\">Card content</div>\n */\nexport const useCardAnimation = () => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Initialize hover animations for card\n    const cleanup = AnimationUtils.initCard(element);\n    \n    // Add entrance animation with small delay for staggered loading effect\n    AnimationUtils.fadeInUp(element, 0.1);\n\n    return cleanup;\n  }, []); // Empty dependency array - only run once on mount\n\n  return ref;\n};\n\n/**\n * Custom hook for entrance animations with multiple animation types\n * \n * @param {string} type - Animation type: 'fadeInUp', 'slideInLeft', 'bounceIn'\n * @param {number} delay - Animation delay in seconds (default: 0)\n * @returns {React.RefObject} Ref object to attach to elements\n * \n * Animation Types:\n * - 'fadeInUp': Fade in from bottom with scale effect\n * - 'slideInLeft': Slide in from left with elastic bounce\n * - 'bounceIn': Scale from zero with elastic bounce\n * \n * Usage:\n * const titleRef = useEntranceAnimation('bounceIn', 0.5);\n * <h1 ref={titleRef}>Welcome!</h1>\n */\nexport const useEntranceAnimation = (type = 'fadeInUp', delay = 0) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    // Apply entrance animation based on specified type\n    switch (type) {\n      case 'fadeInUp':\n        // Smooth fade from bottom - good for content sections\n        AnimationUtils.fadeInUp(element, delay);\n        break;\n      case 'slideInLeft':\n        // Dynamic slide from left - good for navigation items\n        AnimationUtils.slideInLeft(element, delay);\n        break;\n      case 'bounceIn':\n        // Playful bounce effect - good for logos and highlights\n        AnimationUtils.bounceIn(element, delay);\n        break;\n      default:\n        // Default to fadeInUp for consistency\n        AnimationUtils.fadeInUp(element, delay);\n    }\n  }, [type, delay]); // Re-run when type or delay changes\n\n  return ref;\n};\n\n// Export hooks as default object for convenient importing\nconst animationHooks = {\n  useButtonAnimation,\n  useCardAnimation,\n  useEntranceAnimation\n};\n\nexport default animationHooks;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}